#Un(e) gare/airport/port est identifiée par trois lettres uniques à chaque gare/airport/port [OCL]

context Destination:
	inv:
		self.id.size() = 3
		self.id.AllInstances() -> forAll(d1,d2: Destination | d1<>d2 implies d1.destination<>d2.destination)

#Un itinéraire ne peut pas durer plus de 21 jours [OCL]

context BoatItinerary:
  inv: self.duration <= 21


#L'aéroport de départ et d'arrivée d'un vol doit être différent [OCL].

context Flight:
	inv: 
		self.airport -> forAll(departure,arrival: Airport | departure<>arrival implies departure.airport<>arrival.airport)

#Le port de départ et d'arrivée doit être le même [OCL].

context BoatItinerary:
	inv:
		self.port -> forAll(departure,arrival: Port | departure=arrival implies departure.port=arrival.port)

#La partie alphabétique de l'ID d'un vol est unique à chaque compagnie et la partie numérique est unique à chaque vol au sein de la même compagnie [OCL]

context Flight:
	let: airlineCodeAlpha = self.idCompany.substring(1,2) in 
	let: airlineCodeNum = self.idCompany.substring(3.self.idCompany.size()) in
	inv:
		Flight.allInstances() -> forAll((a1,a2: airlineCodeAlpha | a1 = a2 implies a1.airlineCodeAlpha = a2.airlineCodeAlpha) 
						and (n1,n2 = airlineCodeNum | n1 <> n2 implies n1.airlineCodeNum <> n2.airlineCodeNum)

#Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas [OCL]. 

context Boat:
	derive: numItinerary -> count(BoatItinerary)
	inv: numItinerary >= 0
	inv: self.itinerary -> forAll(d: departureDates a: arrivalDate | d <= a)
	

#Toutes les cabines(sieges) d'une même section ont le même prix [OCL].

context Section:
	inv: 
		self.seat.price -> forAll(price1,price2: Seat | price1=price2 implies price1.seat = price2.seat)

#Un siège réservé devient assigné à un passager une fois payé: le siège est donc confirmé [OCL]

context Reservation isPaid(): boolean
	pre: False
	post: True

#Le client peut réserver un siège/cabine disponible dans un vol/trajet/itineraire donné [OCL]:

context Client:: ReserveSeat(): boolean
	pre: False
	post: True
