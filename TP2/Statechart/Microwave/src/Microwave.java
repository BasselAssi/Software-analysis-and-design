/** Generated by itemis CREATE code generator. */

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Microwave implements ITimed, IEventDriven {
	public enum State {
		MICROWAVE_INIT,
		MICROWAVE_POWER,
		MICROWAVE_POWER_R1_HIGHPOWER,
		MICROWAVE_POWER_R1_LOWPOWER,
		MICROWAVE_COOKING,
		MICROWAVE_COOKING_R1_IDLE,
		MICROWAVE_COOKING_R1_WAITINGTOSTART,
		MICROWAVE_COOKING_R1_STARTCOOKING,
		MICROWAVE_COOKING_R1_COUNTDOWN,
		MICROWAVE_COOKING_R1_WAITINGTORESUME,
		MICROWAVE_COOKING_R1_READYTORESUME,
		MICROWAVE_COOKING_R1_COOKINGFINISHED,
		MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON,
		MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF,
		MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED,
		MICROWAVE_DOOR,
		MICROWAVE_DOOR_R1_CLOSEDOOR,
		MICROWAVE_DOOR_R1_OPENDOOR,
		MICROWAVE_TIMER,
		MICROWAVE_TIMER_R1_READDIGITS,
		MICROWAVE_TIMER_R1_FIRSTDIGIT,
		MICROWAVE_TIMER_R1_SECONDDIGIT,
		MICROWAVE_TIMER_R1_WAITINGMOREDIGITS,
		MICROWAVE_TIMER_R1_THIRDDIGIT,
		MICROWAVE_TIMER_R1_FOURTHDIGIT,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[10];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private long totalTime;
	
	protected long getTotalTime() {
		return totalTime;
	}
	
	protected void setTotalTime(long value) {
		this.totalTime = value;
	}
	
	
	private long noOfDigits;
	
	protected long getNoOfDigits() {
		return noOfDigits;
	}
	
	protected void setNoOfDigits(long value) {
		this.noOfDigits = value;
	}
	
	
	private boolean doorClosed;
	
	protected boolean getDoorClosed() {
		return doorClosed;
	}
	
	protected void setDoorClosed(boolean value) {
		this.doorClosed = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Microwave() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setPower(0l);
		
		setTotalTime(0l);
		
		setNoOfDigits(0l);
		
		setDoorClosed(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_Microwave_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_Microwave();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		high = false;
		low = false;
		digit = false;
		timer = false;
		start = false;
		stop = false;
		open = false;
		close = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MICROWAVE_INIT:
			microwave_Init_react(-1l);
			break;
		case MICROWAVE_POWER_R1_HIGHPOWER:
			microwave_Power_r1_HighPower_react(-1l);
			break;
		case MICROWAVE_POWER_R1_LOWPOWER:
			microwave_Power_r1_LowPower_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_IDLE:
			microwave_Cooking_r1_Idle_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_WAITINGTOSTART:
			microwave_Cooking_r1_WaitingToStart_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_STARTCOOKING:
			microwave_Cooking_r1_StartCooking_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_COUNTDOWN:
			microwave_Cooking_r1_Countdown_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_WAITINGTORESUME:
			microwave_Cooking_r1_WaitingToResume_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_READYTORESUME:
			microwave_Cooking_r1_ReadyToResume_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			microwave_Cooking_r1_CookingFinished_r1_BeepOn_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			microwave_Cooking_r1_CookingFinished_r1_BeepOff_react(-1l);
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			microwave_Cooking_r1_CookingFinished_r1_CookingFinished_react(-1l);
			break;
		case MICROWAVE_DOOR_R1_CLOSEDOOR:
			microwave_Door_r1_CloseDoor_react(-1l);
			break;
		case MICROWAVE_DOOR_R1_OPENDOOR:
			microwave_Door_r1_OpenDoor_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_READDIGITS:
			microwave_Timer_r1_ReadDigits_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_FIRSTDIGIT:
			microwave_Timer_r1_FirstDigit_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_SECONDDIGIT:
			microwave_Timer_r1_SecondDigit_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_WAITINGMOREDIGITS:
			microwave_Timer_r1_WaitingMoreDigits_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_THIRDDIGIT:
			microwave_Timer_r1_ThirdDigit_react(-1l);
			break;
		case MICROWAVE_TIMER_R1_FOURTHDIGIT:
			microwave_Timer_r1_FourthDigit_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MICROWAVE_INIT:
			return stateVector[0] == State.MICROWAVE_INIT;
		case MICROWAVE_POWER:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_POWER.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_POWER_R1_LOWPOWER.ordinal();
		case MICROWAVE_POWER_R1_HIGHPOWER:
			return stateVector[0] == State.MICROWAVE_POWER_R1_HIGHPOWER;
		case MICROWAVE_POWER_R1_LOWPOWER:
			return stateVector[0] == State.MICROWAVE_POWER_R1_LOWPOWER;
		case MICROWAVE_COOKING:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_COOKING.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED.ordinal();
		case MICROWAVE_COOKING_R1_IDLE:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_IDLE;
		case MICROWAVE_COOKING_R1_WAITINGTOSTART:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_WAITINGTOSTART;
		case MICROWAVE_COOKING_R1_STARTCOOKING:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_STARTCOOKING;
		case MICROWAVE_COOKING_R1_COUNTDOWN:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_COUNTDOWN;
		case MICROWAVE_COOKING_R1_WAITINGTORESUME:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_WAITINGTORESUME;
		case MICROWAVE_COOKING_R1_READYTORESUME:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_READYTORESUME;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_COOKING_R1_COOKINGFINISHED.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED.ordinal();
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			return stateVector[0] == State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED;
		case MICROWAVE_DOOR:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_DOOR.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_DOOR_R1_OPENDOOR.ordinal();
		case MICROWAVE_DOOR_R1_CLOSEDOOR:
			return stateVector[0] == State.MICROWAVE_DOOR_R1_CLOSEDOOR;
		case MICROWAVE_DOOR_R1_OPENDOOR:
			return stateVector[0] == State.MICROWAVE_DOOR_R1_OPENDOOR;
		case MICROWAVE_TIMER:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_TIMER.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_TIMER_R1_FOURTHDIGIT.ordinal();
		case MICROWAVE_TIMER_R1_READDIGITS:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_READDIGITS;
		case MICROWAVE_TIMER_R1_FIRSTDIGIT:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_FIRSTDIGIT;
		case MICROWAVE_TIMER_R1_SECONDDIGIT:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_SECONDDIGIT;
		case MICROWAVE_TIMER_R1_WAITINGMOREDIGITS:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_WAITINGMOREDIGITS;
		case MICROWAVE_TIMER_R1_THIRDDIGIT:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_THIRDDIGIT;
		case MICROWAVE_TIMER_R1_FOURTHDIGIT:
			return stateVector[0] == State.MICROWAVE_TIMER_R1_FOURTHDIGIT;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void displayTime(long t);
		
		public void display(String msg);
		
		public void clearDisplay();
		
		public void cook();
		
		public void stopCook();
		
		public void beepOn();
		
		public void beepOff();
		
		public void closeDoor();
		
		public void openDoor();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean high;
	
	
	public void raiseHigh() {
		inEventQueue.add(() -> {
			high = true;
		});
		runCycle();
	}
	
	private boolean low;
	
	
	public void raiseLow() {
		inEventQueue.add(() -> {
			low = true;
		});
		runCycle();
	}
	
	private boolean digit;
	
	private long digitValue;
	
	
	public void raiseDigit(final long value) {
		inEventQueue.add(() -> {
			digitValue = value;
			digit = true;
		});
		runCycle();
	}
	protected long getDigitValue() {
		if (! digit ) 
			throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
		return digitValue;
	}
	
	private boolean timer;
	
	
	public void raiseTimer() {
		inEventQueue.add(() -> {
			timer = true;
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(() -> {
			start = true;
		});
		runCycle();
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		inEventQueue.add(() -> {
			stop = true;
		});
		runCycle();
	}
	
	private boolean open;
	
	
	public void raiseOpen() {
		inEventQueue.add(() -> {
			open = true;
		});
		runCycle();
	}
	
	private boolean close;
	
	
	public void raiseClose() {
		inEventQueue.add(() -> {
			close = true;
		});
		runCycle();
	}
	
	private long power;
	
	public long getPower() {
		return power;
	}
	
	public void setPower(long value) {
		this.power = value;
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Init() {
		operationCallback.clearDisplay();
		
		operationCallback.closeDoor();
		
		setDoorClosed(true);
		
		setPower(1l);
	}
	
	/* Entry action for state 'HighPower'. */
	private void entryAction_Microwave_Power_r1_HighPower() {
		timerService.setTimer(this, 0, (5l * 1000l), false);
		
		setPower(1l);
		
		operationCallback.display("High");
	}
	
	/* Entry action for state 'LowPower'. */
	private void entryAction_Microwave_Power_r1_LowPower() {
		timerService.setTimer(this, 1, (5l * 1000l), false);
		
		setPower(2l);
		
		operationCallback.display("Low");
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_Microwave_Cooking_r1_Idle() {
		operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'WaitingToStart'. */
	private void entryAction_Microwave_Cooking_r1_WaitingToStart() {
		timerService.setTimer(this, 2, (120l * 1000l), false);
	}
	
	/* Entry action for state 'StartCooking'. */
	private void entryAction_Microwave_Cooking_r1_StartCooking() {
		operationCallback.cook();
	}
	
	/* Entry action for state 'Countdown'. */
	private void entryAction_Microwave_Cooking_r1_Countdown() {
		timerService.setTimer(this, 3, (1l * 1000l), true);
	}
	
	/* Entry action for state 'WaitingToResume'. */
	private void entryAction_Microwave_Cooking_r1_WaitingToResume() {
		operationCallback.display("Waiting");
		
		operationCallback.stopCook();
	}
	
	/* Entry action for state 'ReadyToResume'. */
	private void entryAction_Microwave_Cooking_r1_ReadyToResume() {
		timerService.setTimer(this, 4, (120l * 1000l), false);
		
		operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'CookingFinished'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished() {
		timerService.setTimer(this, 5, (5l * 1000l), false);
	}
	
	/* Entry action for state 'BeepOn'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		timerService.setTimer(this, 6, 500l, false);
		
		operationCallback.beepOn();
	}
	
	/* Entry action for state 'BeepOff'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		timerService.setTimer(this, 7, 500l, false);
		
		operationCallback.beepOff();
	}
	
	/* Entry action for state 'CookingFinished'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished() {
		operationCallback.display("Finished");
	}
	
	/* Entry action for state 'CloseDoor'. */
	private void entryAction_Microwave_Door_r1_CloseDoor() {
		operationCallback.closeDoor();
		
		setDoorClosed(true);
	}
	
	/* Entry action for state 'OpenDoor'. */
	private void entryAction_Microwave_Door_r1_OpenDoor() {
		operationCallback.openDoor();
		
		setDoorClosed(false);
	}
	
	/* Entry action for state 'ReadDigits'. */
	private void entryAction_Microwave_Timer_r1_ReadDigits() {
		timerService.setTimer(this, 8, (30l * 1000l), false);
		
		setTotalTime(0l);
		
		setNoOfDigits(0l);
	}
	
	/* Entry action for state 'FirstDigit'. */
	private void entryAction_Microwave_Timer_r1_FirstDigit() {
		setTotalTime(getDigitValue());
		
		setNoOfDigits(1l);
		
		operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'SecondDigit'. */
	private void entryAction_Microwave_Timer_r1_SecondDigit() {
		setTotalTime(getTotalTime() + ((10l * getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1l);
		
		operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'WaitingMoreDigits'. */
	private void entryAction_Microwave_Timer_r1_WaitingMoreDigits() {
		timerService.setTimer(this, 9, (30l * 1000l), false);
	}
	
	/* Entry action for state 'ThirdDigit'. */
	private void entryAction_Microwave_Timer_r1_ThirdDigit() {
		setTotalTime(getTotalTime() + ((100l * getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1l);
		
		operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'FourthDigit'. */
	private void entryAction_Microwave_Timer_r1_FourthDigit() {
		setTotalTime(getTotalTime() + ((1000l * getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1l);
		
		operationCallback.displayTime(getTotalTime());
	}
	
	/* Exit action for state 'HighPower'. */
	private void exitAction_Microwave_Power_r1_HighPower() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'LowPower'. */
	private void exitAction_Microwave_Power_r1_LowPower() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'WaitingToStart'. */
	private void exitAction_Microwave_Cooking_r1_WaitingToStart() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Countdown'. */
	private void exitAction_Microwave_Cooking_r1_Countdown() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'ReadyToResume'. */
	private void exitAction_Microwave_Cooking_r1_ReadyToResume() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'CookingFinished'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'BeepOn'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'BeepOff'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'ReadDigits'. */
	private void exitAction_Microwave_Timer_r1_ReadDigits() {
		timerService.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'WaitingMoreDigits'. */
	private void exitAction_Microwave_Timer_r1_WaitingMoreDigits() {
		timerService.unsetTimer(this, 9);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Init_default() {
		entryAction_Microwave_Init();
		stateVector[0] = State.MICROWAVE_INIT;
	}
	
	/* 'default' enter sequence for state HighPower */
	private void enterSequence_Microwave_Power_r1_HighPower_default() {
		entryAction_Microwave_Power_r1_HighPower();
		stateVector[0] = State.MICROWAVE_POWER_R1_HIGHPOWER;
	}
	
	/* 'default' enter sequence for state LowPower */
	private void enterSequence_Microwave_Power_r1_LowPower_default() {
		entryAction_Microwave_Power_r1_LowPower();
		stateVector[0] = State.MICROWAVE_POWER_R1_LOWPOWER;
	}
	
	/* 'default' enter sequence for state Cooking */
	private void enterSequence_Microwave_Cooking_default() {
		enterSequence_Microwave_Cooking_r1_default();
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_Microwave_Cooking_r1_Idle_default() {
		entryAction_Microwave_Cooking_r1_Idle();
		stateVector[0] = State.MICROWAVE_COOKING_R1_IDLE;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitingToStart */
	private void enterSequence_Microwave_Cooking_r1_WaitingToStart_default() {
		entryAction_Microwave_Cooking_r1_WaitingToStart();
		stateVector[0] = State.MICROWAVE_COOKING_R1_WAITINGTOSTART;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state StartCooking */
	private void enterSequence_Microwave_Cooking_r1_StartCooking_default() {
		entryAction_Microwave_Cooking_r1_StartCooking();
		stateVector[0] = State.MICROWAVE_COOKING_R1_STARTCOOKING;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Countdown */
	private void enterSequence_Microwave_Cooking_r1_Countdown_default() {
		entryAction_Microwave_Cooking_r1_Countdown();
		stateVector[0] = State.MICROWAVE_COOKING_R1_COUNTDOWN;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitingToResume */
	private void enterSequence_Microwave_Cooking_r1_WaitingToResume_default() {
		entryAction_Microwave_Cooking_r1_WaitingToResume();
		stateVector[0] = State.MICROWAVE_COOKING_R1_WAITINGTORESUME;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state ReadyToResume */
	private void enterSequence_Microwave_Cooking_r1_ReadyToResume_default() {
		entryAction_Microwave_Cooking_r1_ReadyToResume();
		stateVector[0] = State.MICROWAVE_COOKING_R1_READYTORESUME;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state CookingFinished */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished();
		enterSequence_Microwave_Cooking_r1_CookingFinished_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state BeepOn */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
		stateVector[0] = State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON;
	}
	
	/* 'default' enter sequence for state BeepOff */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
		stateVector[0] = State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF;
	}
	
	/* 'default' enter sequence for state CookingFinished */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
		stateVector[0] = State.MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED;
	}
	
	/* 'default' enter sequence for state CloseDoor */
	private void enterSequence_Microwave_Door_r1_CloseDoor_default() {
		entryAction_Microwave_Door_r1_CloseDoor();
		stateVector[0] = State.MICROWAVE_DOOR_R1_CLOSEDOOR;
	}
	
	/* 'default' enter sequence for state OpenDoor */
	private void enterSequence_Microwave_Door_r1_OpenDoor_default() {
		entryAction_Microwave_Door_r1_OpenDoor();
		stateVector[0] = State.MICROWAVE_DOOR_R1_OPENDOOR;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_Microwave_Timer_default() {
		enterSequence_Microwave_Timer_r1_default();
	}
	
	/* 'default' enter sequence for state ReadDigits */
	private void enterSequence_Microwave_Timer_r1_ReadDigits_default() {
		entryAction_Microwave_Timer_r1_ReadDigits();
		stateVector[0] = State.MICROWAVE_TIMER_R1_READDIGITS;
	}
	
	/* 'default' enter sequence for state FirstDigit */
	private void enterSequence_Microwave_Timer_r1_FirstDigit_default() {
		entryAction_Microwave_Timer_r1_FirstDigit();
		stateVector[0] = State.MICROWAVE_TIMER_R1_FIRSTDIGIT;
	}
	
	/* 'default' enter sequence for state SecondDigit */
	private void enterSequence_Microwave_Timer_r1_SecondDigit_default() {
		entryAction_Microwave_Timer_r1_SecondDigit();
		stateVector[0] = State.MICROWAVE_TIMER_R1_SECONDDIGIT;
	}
	
	/* 'default' enter sequence for state WaitingMoreDigits */
	private void enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default() {
		entryAction_Microwave_Timer_r1_WaitingMoreDigits();
		stateVector[0] = State.MICROWAVE_TIMER_R1_WAITINGMOREDIGITS;
	}
	
	/* 'default' enter sequence for state ThirdDigit */
	private void enterSequence_Microwave_Timer_r1_ThirdDigit_default() {
		entryAction_Microwave_Timer_r1_ThirdDigit();
		stateVector[0] = State.MICROWAVE_TIMER_R1_THIRDDIGIT;
	}
	
	/* 'default' enter sequence for state FourthDigit */
	private void enterSequence_Microwave_Timer_r1_FourthDigit_default() {
		entryAction_Microwave_Timer_r1_FourthDigit();
		stateVector[0] = State.MICROWAVE_TIMER_R1_FOURTHDIGIT;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Cooking_r1_default() {
		react_Microwave_Cooking_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_Microwave_Cooking_r1() {
		switch (historyVector[0]) {
		case MICROWAVE_COOKING_R1_IDLE:
			enterSequence_Microwave_Cooking_r1_Idle_default();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTOSTART:
			enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
			break;
		case MICROWAVE_COOKING_R1_STARTCOOKING:
			enterSequence_Microwave_Cooking_r1_StartCooking_default();
			break;
		case MICROWAVE_COOKING_R1_COUNTDOWN:
			enterSequence_Microwave_Cooking_r1_Countdown_default();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTORESUME:
			enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
			break;
		case MICROWAVE_COOKING_R1_READYTORESUME:
			enterSequence_Microwave_Cooking_r1_ReadyToResume_default();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_default() {
		react_Microwave_Cooking_r1_CookingFinished_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Timer_r1_default() {
		react_Microwave_Timer_r1__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Init() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Power */
	private void exitSequence_Microwave_Power() {
		exitSequence_Microwave_Power_r1();
	}
	
	/* Default exit sequence for state HighPower */
	private void exitSequence_Microwave_Power_r1_HighPower() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Power_r1_HighPower();
	}
	
	/* Default exit sequence for state LowPower */
	private void exitSequence_Microwave_Power_r1_LowPower() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Power_r1_LowPower();
	}
	
	/* Default exit sequence for state Cooking */
	private void exitSequence_Microwave_Cooking() {
		exitSequence_Microwave_Cooking_r1();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_Microwave_Cooking_r1_Idle() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state WaitingToStart */
	private void exitSequence_Microwave_Cooking_r1_WaitingToStart() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cooking_r1_WaitingToStart();
	}
	
	/* Default exit sequence for state StartCooking */
	private void exitSequence_Microwave_Cooking_r1_StartCooking() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Countdown */
	private void exitSequence_Microwave_Cooking_r1_Countdown() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cooking_r1_Countdown();
	}
	
	/* Default exit sequence for state WaitingToResume */
	private void exitSequence_Microwave_Cooking_r1_WaitingToResume() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state ReadyToResume */
	private void exitSequence_Microwave_Cooking_r1_ReadyToResume() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cooking_r1_ReadyToResume();
	}
	
	/* Default exit sequence for state CookingFinished */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished() {
		exitSequence_Microwave_Cooking_r1_CookingFinished_r1();
		exitAction_Microwave_Cooking_r1_CookingFinished();
	}
	
	/* Default exit sequence for state BeepOn */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
	}
	
	/* Default exit sequence for state BeepOff */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
	}
	
	/* Default exit sequence for state CookingFinished */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Door */
	private void exitSequence_Microwave_Door() {
		exitSequence_Microwave_Door_r1();
	}
	
	/* Default exit sequence for state CloseDoor */
	private void exitSequence_Microwave_Door_r1_CloseDoor() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state OpenDoor */
	private void exitSequence_Microwave_Door_r1_OpenDoor() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_Microwave_Timer() {
		exitSequence_Microwave_Timer_r1();
	}
	
	/* Default exit sequence for state ReadDigits */
	private void exitSequence_Microwave_Timer_r1_ReadDigits() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Timer_r1_ReadDigits();
	}
	
	/* Default exit sequence for state FirstDigit */
	private void exitSequence_Microwave_Timer_r1_FirstDigit() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state SecondDigit */
	private void exitSequence_Microwave_Timer_r1_SecondDigit() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state WaitingMoreDigits */
	private void exitSequence_Microwave_Timer_r1_WaitingMoreDigits() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Timer_r1_WaitingMoreDigits();
	}
	
	/* Default exit sequence for state ThirdDigit */
	private void exitSequence_Microwave_Timer_r1_ThirdDigit() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state FourthDigit */
	private void exitSequence_Microwave_Timer_r1_FourthDigit() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case MICROWAVE_INIT:
			exitSequence_Microwave_Init();
			break;
		case MICROWAVE_POWER_R1_HIGHPOWER:
			exitSequence_Microwave_Power_r1_HighPower();
			break;
		case MICROWAVE_POWER_R1_LOWPOWER:
			exitSequence_Microwave_Power_r1_LowPower();
			break;
		case MICROWAVE_COOKING_R1_IDLE:
			exitSequence_Microwave_Cooking_r1_Idle();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTOSTART:
			exitSequence_Microwave_Cooking_r1_WaitingToStart();
			break;
		case MICROWAVE_COOKING_R1_STARTCOOKING:
			exitSequence_Microwave_Cooking_r1_StartCooking();
			break;
		case MICROWAVE_COOKING_R1_COUNTDOWN:
			exitSequence_Microwave_Cooking_r1_Countdown();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTORESUME:
			exitSequence_Microwave_Cooking_r1_WaitingToResume();
			break;
		case MICROWAVE_COOKING_R1_READYTORESUME:
			exitSequence_Microwave_Cooking_r1_ReadyToResume();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case MICROWAVE_DOOR_R1_CLOSEDOOR:
			exitSequence_Microwave_Door_r1_CloseDoor();
			break;
		case MICROWAVE_DOOR_R1_OPENDOOR:
			exitSequence_Microwave_Door_r1_OpenDoor();
			break;
		case MICROWAVE_TIMER_R1_READDIGITS:
			exitSequence_Microwave_Timer_r1_ReadDigits();
			break;
		case MICROWAVE_TIMER_R1_FIRSTDIGIT:
			exitSequence_Microwave_Timer_r1_FirstDigit();
			break;
		case MICROWAVE_TIMER_R1_SECONDDIGIT:
			exitSequence_Microwave_Timer_r1_SecondDigit();
			break;
		case MICROWAVE_TIMER_R1_WAITINGMOREDIGITS:
			exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
			break;
		case MICROWAVE_TIMER_R1_THIRDDIGIT:
			exitSequence_Microwave_Timer_r1_ThirdDigit();
			break;
		case MICROWAVE_TIMER_R1_FOURTHDIGIT:
			exitSequence_Microwave_Timer_r1_FourthDigit();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Power_r1() {
		switch (stateVector[0]) {
		case MICROWAVE_POWER_R1_HIGHPOWER:
			exitSequence_Microwave_Power_r1_HighPower();
			break;
		case MICROWAVE_POWER_R1_LOWPOWER:
			exitSequence_Microwave_Power_r1_LowPower();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Cooking_r1() {
		switch (stateVector[0]) {
		case MICROWAVE_COOKING_R1_IDLE:
			exitSequence_Microwave_Cooking_r1_Idle();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTOSTART:
			exitSequence_Microwave_Cooking_r1_WaitingToStart();
			break;
		case MICROWAVE_COOKING_R1_STARTCOOKING:
			exitSequence_Microwave_Cooking_r1_StartCooking();
			break;
		case MICROWAVE_COOKING_R1_COUNTDOWN:
			exitSequence_Microwave_Cooking_r1_Countdown();
			break;
		case MICROWAVE_COOKING_R1_WAITINGTORESUME:
			exitSequence_Microwave_Cooking_r1_WaitingToResume();
			break;
		case MICROWAVE_COOKING_R1_READYTORESUME:
			exitSequence_Microwave_Cooking_r1_ReadyToResume();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1() {
		switch (stateVector[0]) {
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPON:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_BEEPOFF:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			break;
		case MICROWAVE_COOKING_R1_COOKINGFINISHED_R1_COOKINGFINISHED:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Door_r1() {
		switch (stateVector[0]) {
		case MICROWAVE_DOOR_R1_CLOSEDOOR:
			exitSequence_Microwave_Door_r1_CloseDoor();
			break;
		case MICROWAVE_DOOR_R1_OPENDOOR:
			exitSequence_Microwave_Door_r1_OpenDoor();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Timer_r1() {
		switch (stateVector[0]) {
		case MICROWAVE_TIMER_R1_READDIGITS:
			exitSequence_Microwave_Timer_r1_ReadDigits();
			break;
		case MICROWAVE_TIMER_R1_FIRSTDIGIT:
			exitSequence_Microwave_Timer_r1_FirstDigit();
			break;
		case MICROWAVE_TIMER_R1_SECONDDIGIT:
			exitSequence_Microwave_Timer_r1_SecondDigit();
			break;
		case MICROWAVE_TIMER_R1_WAITINGMOREDIGITS:
			exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
			break;
		case MICROWAVE_TIMER_R1_THIRDDIGIT:
			exitSequence_Microwave_Timer_r1_ThirdDigit();
			break;
		case MICROWAVE_TIMER_R1_FOURTHDIGIT:
			exitSequence_Microwave_Timer_r1_FourthDigit();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Cooking_r1__choice_0() {
		if (getDoorClosed()==false) {
			enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
		} else {
			if (getDoorClosed()==true) {
				enterSequence_Microwave_Cooking_r1_StartCooking_default();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Timer_r1__choice_0() {
		if (getNoOfDigits()==1l) {
			enterSequence_Microwave_Timer_r1_SecondDigit_default();
		} else {
			if (getNoOfDigits()==2l) {
				enterSequence_Microwave_Timer_r1_ThirdDigit_default();
			} else {
				if (getNoOfDigits()==3l) {
					enterSequence_Microwave_Timer_r1_FourthDigit_default();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cooking_r1__entry_Default() {
		enterSequence_Microwave_Cooking_r1_Idle_default();
	}
	
	/* Default react sequence for shallow history entry history */
	private void react_Microwave_Cooking_r1_history() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_Microwave_Cooking_r1();
		} else {
			enterSequence_Microwave_Cooking_r1_Idle_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cooking_r1_CookingFinished_r1__entry_Default() {
		enterSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Timer_r1__entry_Default() {
		enterSequence_Microwave_Timer_r1_ReadDigits_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long microwave_Init_react(long transitioned_before) {
		long transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Init();
			enterSequence_Microwave_Cooking_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Power_react(long transitioned_before) {
		long transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (open) {
				exitSequence_Microwave_Power();
				enterSequence_Microwave_Door_r1_OpenDoor_default();
				transitioned_after = 0l;
			} else {
				if (close) {
					exitSequence_Microwave_Power();
					enterSequence_Microwave_Door_r1_CloseDoor_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Power_r1_HighPower_react(long transitioned_before) {
		long transitioned_after = microwave_Power_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (low) {
				exitSequence_Microwave_Power_r1_HighPower();
				enterSequence_Microwave_Power_r1_LowPower_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_Microwave_Power();
					timeEvents[0] = false;
					enterSequence_Microwave_Cooking_r1_Idle_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Power_r1_LowPower_react(long transitioned_before) {
		long transitioned_after = microwave_Power_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (high) {
				exitSequence_Microwave_Power_r1_LowPower();
				enterSequence_Microwave_Power_r1_HighPower_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[1]) {
					exitSequence_Microwave_Power();
					timeEvents[1] = false;
					enterSequence_Microwave_Cooking_r1_Idle_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_react(long transitioned_before) {
		long transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (close) {
				exitSequence_Microwave_Cooking();
				enterSequence_Microwave_Door_r1_CloseDoor_default();
				transitioned_after = 0l;
			} else {
				if (open) {
					exitSequence_Microwave_Cooking();
					enterSequence_Microwave_Door_r1_OpenDoor_default();
					transitioned_after = 0l;
				} else {
					if (stop) {
						exitSequence_Microwave_Cooking();
						enterSequence_Microwave_Cooking_r1_Idle_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_Idle_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (high) {
				exitSequence_Microwave_Cooking();
				enterSequence_Microwave_Power_r1_HighPower_default();
				transitioned_after = 0l;
			} else {
				if (low) {
					exitSequence_Microwave_Cooking();
					enterSequence_Microwave_Power_r1_LowPower_default();
					transitioned_after = 0l;
				} else {
					if (timer) {
						exitSequence_Microwave_Cooking();
						enterSequence_Microwave_Timer_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_WaitingToStart_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_Microwave_Cooking_r1_WaitingToStart();
				timeEvents[2] = false;
				enterSequence_Microwave_Cooking_r1_Idle_default();
				transitioned_after = 0l;
			} else {
				if (start) {
					exitSequence_Microwave_Cooking_r1_WaitingToStart();
					react_Microwave_Cooking_r1__choice_0();
					transitioned_after = 0l;
				} else {
					if (timer) {
						exitSequence_Microwave_Cooking();
						enterSequence_Microwave_Timer_default();
						transitioned_after = 0l;
					} else {
						if (getTotalTime()==0l) {
							exitSequence_Microwave_Cooking_r1_WaitingToStart();
							enterSequence_Microwave_Cooking_r1_Idle_default();
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_StartCooking_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Cooking_r1_StartCooking();
			enterSequence_Microwave_Cooking_r1_Countdown_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_Countdown_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (getDoorClosed()==false) {
				exitSequence_Microwave_Cooking_r1_Countdown();
				enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
				transitioned_after = 0l;
			} else {
				if (getTotalTime()==0l) {
					exitSequence_Microwave_Cooking_r1_Countdown();
					enterSequence_Microwave_Cooking_r1_CookingFinished_default();
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			if (((timeEvents[3]) && (getTotalTime()>0l))) {
				setTotalTime(getTotalTime() - 1l);
				
				operationCallback.displayTime(getTotalTime());
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_WaitingToResume_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (getDoorClosed()==true) {
				exitSequence_Microwave_Cooking_r1_WaitingToResume();
				enterSequence_Microwave_Cooking_r1_ReadyToResume_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_ReadyToResume_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (start) {
				exitSequence_Microwave_Cooking_r1_ReadyToResume();
				enterSequence_Microwave_Cooking_r1_StartCooking_default();
				transitioned_after = 0l;
			} else {
				if (getDoorClosed()==false) {
					exitSequence_Microwave_Cooking_r1_ReadyToResume();
					enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
					transitioned_after = 0l;
				} else {
					if (timeEvents[4]) {
						exitSequence_Microwave_Cooking_r1_ReadyToResume();
						timeEvents[4] = false;
						enterSequence_Microwave_Cooking_r1_Idle_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_CookingFinished_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_Microwave_Cooking_r1_CookingFinished();
				timeEvents[5] = false;
				enterSequence_Microwave_Cooking_r1_Idle_default();
				transitioned_after = 0l;
			} else {
				if (getDoorClosed()==false) {
					exitSequence_Microwave_Cooking_r1_CookingFinished();
					enterSequence_Microwave_Cooking_r1_Idle_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_CookingFinished_r1_BeepOn_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_r1_CookingFinished_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (timeEvents[6]) {
				exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
				timeEvents[6] = false;
				enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_CookingFinished_r1_BeepOff_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_r1_CookingFinished_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (timeEvents[7]) {
				exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
				timeEvents[7] = false;
				enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cooking_r1_CookingFinished_r1_CookingFinished_react(long transitioned_before) {
		long transitioned_after = microwave_Cooking_r1_CookingFinished_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Door_react(long transitioned_before) {
		return react(transitioned_before);
	}
	
	private long microwave_Door_r1_CloseDoor_react(long transitioned_before) {
		long transitioned_after = microwave_Door_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Door();
			react_Microwave_Cooking_r1_history();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Door_r1_OpenDoor_react(long transitioned_before) {
		long transitioned_after = microwave_Door_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Door();
			react_Microwave_Cooking_r1_history();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_react(long transitioned_before) {
		long transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (open) {
				exitSequence_Microwave_Timer();
				enterSequence_Microwave_Door_r1_OpenDoor_default();
				transitioned_after = 0l;
			} else {
				if (close) {
					exitSequence_Microwave_Timer();
					enterSequence_Microwave_Door_r1_CloseDoor_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_ReadDigits_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (digit) {
				exitSequence_Microwave_Timer_r1_ReadDigits();
				enterSequence_Microwave_Timer_r1_FirstDigit_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[8]) {
					exitSequence_Microwave_Timer();
					timeEvents[8] = false;
					enterSequence_Microwave_Cooking_r1_Idle_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_FirstDigit_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Timer_r1_FirstDigit();
			enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_SecondDigit_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Timer_r1_SecondDigit();
			enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_WaitingMoreDigits_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			if (digit) {
				exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
				react_Microwave_Timer_r1__choice_0();
				transitioned_after = 0l;
			} else {
				if (timeEvents[9]) {
					exitSequence_Microwave_Timer();
					timeEvents[9] = false;
					enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
					transitioned_after = 0l;
				} else {
					if (start) {
						exitSequence_Microwave_Timer();
						react_Microwave_Cooking_r1__choice_0();
						transitioned_after = 0l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_ThirdDigit_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Timer_r1_ThirdDigit();
			enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	private long microwave_Timer_r1_FourthDigit_react(long transitioned_before) {
		long transitioned_after = microwave_Timer_react(transitioned_before);
		
		if (transitioned_after<0l) {
			exitSequence_Microwave_Timer();
			enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
			transitioned_after = 0l;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
