/** Generated by YAKINDU Statechart Tools code generator. */
package tp2.microwave;

import tp2.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_Init,
		microwave_Power,
		microwave_Power_r1_HighPower,
		microwave_Power_r1_LowPower,
		microwave_Cooking,
		microwave_Cooking_r1_Idle,
		microwave_Cooking_r1_WaitingToStart,
		microwave_Cooking_r1_StartCooking,
		microwave_Cooking_r1_Countdown,
		microwave_Cooking_r1_WaitingToResume,
		microwave_Cooking_r1_ReadyToResume,
		microwave_Cooking_r1_CookingFinished,
		microwave_Cooking_r1_CookingFinished_r1_BeepOn,
		microwave_Cooking_r1_CookingFinished_r1_BeepOff,
		microwave_Cooking_r1_CookingFinished_r1_CookingFinished,
		microwave_Door,
		microwave_Door_r1_CloseDoor,
		microwave_Door_r1_OpenDoor,
		microwave_Timer,
		microwave_Timer_r1_ReadDigits,
		microwave_Timer_r1_FirstDigit,
		microwave_Timer_r1_SecondDigit,
		microwave_Timer_r1_WaitingMoreDigits,
		microwave_Timer_r1_ThirdDigit,
		microwave_Timer_r1_FourthDigit,
		$NullState$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[10];
	
	private long totalTime;
	
	protected long getTotalTime() {
		return totalTime;
	}
	
	protected void setTotalTime(long value) {
		this.totalTime = value;
	}
	
	
	private long noOfDigits;
	
	protected long getNoOfDigits() {
		return noOfDigits;
	}
	
	protected void setNoOfDigits(long value) {
		this.noOfDigits = value;
	}
	
	
	private boolean doorClosed;
	
	protected boolean getDoorClosed() {
		return doorClosed;
	}
	
	protected void setDoorClosed(boolean value) {
		this.doorClosed = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setTotalTime(0);
		
		setNoOfDigits(0);
		
		setDoorClosed(false);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_Init:
				microwave_Init_react(true);
				break;
			case microwave_Power_r1_HighPower:
				microwave_Power_r1_HighPower_react(true);
				break;
			case microwave_Power_r1_LowPower:
				microwave_Power_r1_LowPower_react(true);
				break;
			case microwave_Cooking_r1_Idle:
				microwave_Cooking_r1_Idle_react(true);
				break;
			case microwave_Cooking_r1_WaitingToStart:
				microwave_Cooking_r1_WaitingToStart_react(true);
				break;
			case microwave_Cooking_r1_StartCooking:
				microwave_Cooking_r1_StartCooking_react(true);
				break;
			case microwave_Cooking_r1_Countdown:
				microwave_Cooking_r1_Countdown_react(true);
				break;
			case microwave_Cooking_r1_WaitingToResume:
				microwave_Cooking_r1_WaitingToResume_react(true);
				break;
			case microwave_Cooking_r1_ReadyToResume:
				microwave_Cooking_r1_ReadyToResume_react(true);
				break;
			case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
				microwave_Cooking_r1_CookingFinished_r1_BeepOn_react(true);
				break;
			case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
				microwave_Cooking_r1_CookingFinished_r1_BeepOff_react(true);
				break;
			case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
				microwave_Cooking_r1_CookingFinished_r1_CookingFinished_react(true);
				break;
			case microwave_Door_r1_CloseDoor:
				microwave_Door_r1_CloseDoor_react(true);
				break;
			case microwave_Door_r1_OpenDoor:
				microwave_Door_r1_OpenDoor_react(true);
				break;
			case microwave_Timer_r1_ReadDigits:
				microwave_Timer_r1_ReadDigits_react(true);
				break;
			case microwave_Timer_r1_FirstDigit:
				microwave_Timer_r1_FirstDigit_react(true);
				break;
			case microwave_Timer_r1_SecondDigit:
				microwave_Timer_r1_SecondDigit_react(true);
				break;
			case microwave_Timer_r1_WaitingMoreDigits:
				microwave_Timer_r1_WaitingMoreDigits_react(true);
				break;
			case microwave_Timer_r1_ThirdDigit:
				microwave_Timer_r1_ThirdDigit_react(true);
				break;
			case microwave_Timer_r1_FourthDigit:
				microwave_Timer_r1_FourthDigit_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_Init:
			return stateVector[0] == State.microwave_Init;
		case microwave_Power:
			return stateVector[0].ordinal() >= State.
					microwave_Power.ordinal()&& stateVector[0].ordinal() <= State.microwave_Power_r1_LowPower.ordinal();
		case microwave_Power_r1_HighPower:
			return stateVector[0] == State.microwave_Power_r1_HighPower;
		case microwave_Power_r1_LowPower:
			return stateVector[0] == State.microwave_Power_r1_LowPower;
		case microwave_Cooking:
			return stateVector[0].ordinal() >= State.
					microwave_Cooking.ordinal()&& stateVector[0].ordinal() <= State.microwave_Cooking_r1_CookingFinished_r1_CookingFinished.ordinal();
		case microwave_Cooking_r1_Idle:
			return stateVector[0] == State.microwave_Cooking_r1_Idle;
		case microwave_Cooking_r1_WaitingToStart:
			return stateVector[0] == State.microwave_Cooking_r1_WaitingToStart;
		case microwave_Cooking_r1_StartCooking:
			return stateVector[0] == State.microwave_Cooking_r1_StartCooking;
		case microwave_Cooking_r1_Countdown:
			return stateVector[0] == State.microwave_Cooking_r1_Countdown;
		case microwave_Cooking_r1_WaitingToResume:
			return stateVector[0] == State.microwave_Cooking_r1_WaitingToResume;
		case microwave_Cooking_r1_ReadyToResume:
			return stateVector[0] == State.microwave_Cooking_r1_ReadyToResume;
		case microwave_Cooking_r1_CookingFinished:
			return stateVector[0].ordinal() >= State.
					microwave_Cooking_r1_CookingFinished.ordinal()&& stateVector[0].ordinal() <= State.microwave_Cooking_r1_CookingFinished_r1_CookingFinished.ordinal();
		case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
			return stateVector[0] == State.microwave_Cooking_r1_CookingFinished_r1_BeepOn;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
			return stateVector[0] == State.microwave_Cooking_r1_CookingFinished_r1_BeepOff;
		case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
			return stateVector[0] == State.microwave_Cooking_r1_CookingFinished_r1_CookingFinished;
		case microwave_Door:
			return stateVector[0].ordinal() >= State.
					microwave_Door.ordinal()&& stateVector[0].ordinal() <= State.microwave_Door_r1_OpenDoor.ordinal();
		case microwave_Door_r1_CloseDoor:
			return stateVector[0] == State.microwave_Door_r1_CloseDoor;
		case microwave_Door_r1_OpenDoor:
			return stateVector[0] == State.microwave_Door_r1_OpenDoor;
		case microwave_Timer:
			return stateVector[0].ordinal() >= State.
					microwave_Timer.ordinal()&& stateVector[0].ordinal() <= State.microwave_Timer_r1_FourthDigit.ordinal();
		case microwave_Timer_r1_ReadDigits:
			return stateVector[0] == State.microwave_Timer_r1_ReadDigits;
		case microwave_Timer_r1_FirstDigit:
			return stateVector[0] == State.microwave_Timer_r1_FirstDigit;
		case microwave_Timer_r1_SecondDigit:
			return stateVector[0] == State.microwave_Timer_r1_SecondDigit;
		case microwave_Timer_r1_WaitingMoreDigits:
			return stateVector[0] == State.microwave_Timer_r1_WaitingMoreDigits;
		case microwave_Timer_r1_ThirdDigit:
			return stateVector[0] == State.microwave_Timer_r1_ThirdDigit;
		case microwave_Timer_r1_FourthDigit:
			return stateVector[0] == State.microwave_Timer_r1_FourthDigit;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	private boolean check_Microwave_Cooking_r1__choice_0_tr0_tr0() {
		return getDoorClosed()==false;
	}
	
	private boolean check_Microwave_Cooking_r1__choice_0_tr1_tr1() {
		return getDoorClosed()==true;
	}
	
	private boolean check_Microwave_Timer_r1__choice_0_tr0_tr0() {
		return getNoOfDigits()==1;
	}
	
	private boolean check_Microwave_Timer_r1__choice_0_tr1_tr1() {
		return getNoOfDigits()==2;
	}
	
	private boolean check_Microwave_Timer_r1__choice_0_tr2_tr2() {
		return getNoOfDigits()==3;
	}
	
	private void effect_Microwave_Cooking_r1__choice_0_tr0() {
		enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
	}
	
	private void effect_Microwave_Cooking_r1__choice_0_tr1() {
		enterSequence_Microwave_Cooking_r1_StartCooking_default();
	}
	
	private void effect_Microwave_Timer_r1__choice_0_tr0() {
		enterSequence_Microwave_Timer_r1_SecondDigit_default();
	}
	
	private void effect_Microwave_Timer_r1__choice_0_tr1() {
		enterSequence_Microwave_Timer_r1_ThirdDigit_default();
	}
	
	private void effect_Microwave_Timer_r1__choice_0_tr2() {
		enterSequence_Microwave_Timer_r1_FourthDigit_default();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Init() {
		sCInterface.operationCallback.clearDisplay();
		
		sCInterface.operationCallback.closeDoor();
		
		setDoorClosed(true);
		
		sCInterface.setPower(1);
	}
	
	/* Entry action for state 'HighPower'. */
	private void entryAction_Microwave_Power_r1_HighPower() {
		timer.setTimer(this, 0, (5 * 1000), false);
		
		sCInterface.setPower(1);
		
		sCInterface.operationCallback.display("High");
	}
	
	/* Entry action for state 'LowPower'. */
	private void entryAction_Microwave_Power_r1_LowPower() {
		timer.setTimer(this, 1, (5 * 1000), false);
		
		sCInterface.setPower(2);
		
		sCInterface.operationCallback.display("Low");
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_Microwave_Cooking_r1_Idle() {
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'WaitingToStart'. */
	private void entryAction_Microwave_Cooking_r1_WaitingToStart() {
		timer.setTimer(this, 2, (120 * 1000), false);
	}
	
	/* Entry action for state 'StartCooking'. */
	private void entryAction_Microwave_Cooking_r1_StartCooking() {
		sCInterface.operationCallback.cook();
	}
	
	/* Entry action for state 'Countdown'. */
	private void entryAction_Microwave_Cooking_r1_Countdown() {
		timer.setTimer(this, 3, (1 * 1000), true);
	}
	
	/* Entry action for state 'WaitingToResume'. */
	private void entryAction_Microwave_Cooking_r1_WaitingToResume() {
		sCInterface.operationCallback.display("Waiting");
		
		sCInterface.operationCallback.stopCook();
	}
	
	/* Entry action for state 'ReadyToResume'. */
	private void entryAction_Microwave_Cooking_r1_ReadyToResume() {
		timer.setTimer(this, 4, (120 * 1000), false);
		
		sCInterface.operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'CookingFinished'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished() {
		timer.setTimer(this, 5, (5 * 1000), false);
	}
	
	/* Entry action for state 'BeepOn'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		timer.setTimer(this, 6, 500, false);
		
		sCInterface.operationCallback.beepOn();
	}
	
	/* Entry action for state 'BeepOff'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		timer.setTimer(this, 7, 500, false);
		
		sCInterface.operationCallback.beepOff();
	}
	
	/* Entry action for state 'CookingFinished'. */
	private void entryAction_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished() {
		sCInterface.operationCallback.display("Finished");
	}
	
	/* Entry action for state 'CloseDoor'. */
	private void entryAction_Microwave_Door_r1_CloseDoor() {
		sCInterface.operationCallback.closeDoor();
		
		setDoorClosed(true);
	}
	
	/* Entry action for state 'OpenDoor'. */
	private void entryAction_Microwave_Door_r1_OpenDoor() {
		sCInterface.operationCallback.openDoor();
		
		setDoorClosed(false);
	}
	
	/* Entry action for state 'ReadDigits'. */
	private void entryAction_Microwave_Timer_r1_ReadDigits() {
		timer.setTimer(this, 8, (30 * 1000), false);
		
		setTotalTime(0);
		
		setNoOfDigits(0);
	}
	
	/* Entry action for state 'FirstDigit'. */
	private void entryAction_Microwave_Timer_r1_FirstDigit() {
		setTotalTime(sCInterface.getDigitValue());
		
		setNoOfDigits(1);
		
		sCInterface.operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'SecondDigit'. */
	private void entryAction_Microwave_Timer_r1_SecondDigit() {
		setTotalTime(getTotalTime() + ((10 * sCInterface.getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1);
		
		sCInterface.operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'WaitingMoreDigits'. */
	private void entryAction_Microwave_Timer_r1_WaitingMoreDigits() {
		timer.setTimer(this, 9, (30 * 1000), false);
	}
	
	/* Entry action for state 'ThirdDigit'. */
	private void entryAction_Microwave_Timer_r1_ThirdDigit() {
		setTotalTime(getTotalTime() + ((100 * sCInterface.getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1);
		
		sCInterface.operationCallback.displayTime(getTotalTime());
	}
	
	/* Entry action for state 'FourthDigit'. */
	private void entryAction_Microwave_Timer_r1_FourthDigit() {
		setTotalTime(getTotalTime() + ((1000 * sCInterface.getDigitValue())));
		
		setNoOfDigits(getNoOfDigits() + 1);
		
		sCInterface.operationCallback.displayTime(getTotalTime());
	}
	
	/* Exit action for state 'HighPower'. */
	private void exitAction_Microwave_Power_r1_HighPower() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'LowPower'. */
	private void exitAction_Microwave_Power_r1_LowPower() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'WaitingToStart'. */
	private void exitAction_Microwave_Cooking_r1_WaitingToStart() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Countdown'. */
	private void exitAction_Microwave_Cooking_r1_Countdown() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'ReadyToResume'. */
	private void exitAction_Microwave_Cooking_r1_ReadyToResume() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'CookingFinished'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'BeepOn'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'BeepOff'. */
	private void exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'ReadDigits'. */
	private void exitAction_Microwave_Timer_r1_ReadDigits() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'WaitingMoreDigits'. */
	private void exitAction_Microwave_Timer_r1_WaitingMoreDigits() {
		timer.unsetTimer(this, 9);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Init_default() {
		entryAction_Microwave_Init();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Init;
	}
	
	/* 'default' enter sequence for state HighPower */
	private void enterSequence_Microwave_Power_r1_HighPower_default() {
		entryAction_Microwave_Power_r1_HighPower();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Power_r1_HighPower;
	}
	
	/* 'default' enter sequence for state LowPower */
	private void enterSequence_Microwave_Power_r1_LowPower_default() {
		entryAction_Microwave_Power_r1_LowPower();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Power_r1_LowPower;
	}
	
	/* 'default' enter sequence for state Cooking */
	private void enterSequence_Microwave_Cooking_default() {
		enterSequence_Microwave_Cooking_r1_default();
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_Microwave_Cooking_r1_Idle_default() {
		entryAction_Microwave_Cooking_r1_Idle();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_Idle;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitingToStart */
	private void enterSequence_Microwave_Cooking_r1_WaitingToStart_default() {
		entryAction_Microwave_Cooking_r1_WaitingToStart();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_WaitingToStart;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state StartCooking */
	private void enterSequence_Microwave_Cooking_r1_StartCooking_default() {
		entryAction_Microwave_Cooking_r1_StartCooking();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_StartCooking;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Countdown */
	private void enterSequence_Microwave_Cooking_r1_Countdown_default() {
		entryAction_Microwave_Cooking_r1_Countdown();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_Countdown;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitingToResume */
	private void enterSequence_Microwave_Cooking_r1_WaitingToResume_default() {
		entryAction_Microwave_Cooking_r1_WaitingToResume();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_WaitingToResume;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state ReadyToResume */
	private void enterSequence_Microwave_Cooking_r1_ReadyToResume_default() {
		entryAction_Microwave_Cooking_r1_ReadyToResume();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_ReadyToResume;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state CookingFinished */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished();
		enterSequence_Microwave_Cooking_r1_CookingFinished_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state BeepOn */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_CookingFinished_r1_BeepOn;
	}
	
	/* 'default' enter sequence for state BeepOff */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_CookingFinished_r1_BeepOff;
	}
	
	/* 'default' enter sequence for state CookingFinished */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished_default() {
		entryAction_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Cooking_r1_CookingFinished_r1_CookingFinished;
	}
	
	/* 'default' enter sequence for state CloseDoor */
	private void enterSequence_Microwave_Door_r1_CloseDoor_default() {
		entryAction_Microwave_Door_r1_CloseDoor();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Door_r1_CloseDoor;
	}
	
	/* 'default' enter sequence for state OpenDoor */
	private void enterSequence_Microwave_Door_r1_OpenDoor_default() {
		entryAction_Microwave_Door_r1_OpenDoor();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Door_r1_OpenDoor;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_Microwave_Timer_default() {
		enterSequence_Microwave_Timer_r1_default();
	}
	
	/* 'default' enter sequence for state ReadDigits */
	private void enterSequence_Microwave_Timer_r1_ReadDigits_default() {
		entryAction_Microwave_Timer_r1_ReadDigits();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_ReadDigits;
	}
	
	/* 'default' enter sequence for state FirstDigit */
	private void enterSequence_Microwave_Timer_r1_FirstDigit_default() {
		entryAction_Microwave_Timer_r1_FirstDigit();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_FirstDigit;
	}
	
	/* 'default' enter sequence for state SecondDigit */
	private void enterSequence_Microwave_Timer_r1_SecondDigit_default() {
		entryAction_Microwave_Timer_r1_SecondDigit();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_SecondDigit;
	}
	
	/* 'default' enter sequence for state WaitingMoreDigits */
	private void enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default() {
		entryAction_Microwave_Timer_r1_WaitingMoreDigits();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_WaitingMoreDigits;
	}
	
	/* 'default' enter sequence for state ThirdDigit */
	private void enterSequence_Microwave_Timer_r1_ThirdDigit_default() {
		entryAction_Microwave_Timer_r1_ThirdDigit();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_ThirdDigit;
	}
	
	/* 'default' enter sequence for state FourthDigit */
	private void enterSequence_Microwave_Timer_r1_FourthDigit_default() {
		entryAction_Microwave_Timer_r1_FourthDigit();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Timer_r1_FourthDigit;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Cooking_r1_default() {
		react_Microwave_Cooking_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_Microwave_Cooking_r1() {
		switch (historyVector[0]) {
		case microwave_Cooking_r1_Idle:
			enterSequence_Microwave_Cooking_r1_Idle_default();
			break;
		case microwave_Cooking_r1_WaitingToStart:
			enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
			break;
		case microwave_Cooking_r1_StartCooking:
			enterSequence_Microwave_Cooking_r1_StartCooking_default();
			break;
		case microwave_Cooking_r1_Countdown:
			enterSequence_Microwave_Cooking_r1_Countdown_default();
			break;
		case microwave_Cooking_r1_WaitingToResume:
			enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
			break;
		case microwave_Cooking_r1_ReadyToResume:
			enterSequence_Microwave_Cooking_r1_ReadyToResume_default();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
			enterSequence_Microwave_Cooking_r1_CookingFinished_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Cooking_r1_CookingFinished_r1_default() {
		react_Microwave_Cooking_r1_CookingFinished_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Timer_r1_default() {
		react_Microwave_Timer_r1__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Power */
	private void exitSequence_Microwave_Power() {
		exitSequence_Microwave_Power_r1();
	}
	
	/* Default exit sequence for state HighPower */
	private void exitSequence_Microwave_Power_r1_HighPower() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Power_r1_HighPower();
	}
	
	/* Default exit sequence for state LowPower */
	private void exitSequence_Microwave_Power_r1_LowPower() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Power_r1_LowPower();
	}
	
	/* Default exit sequence for state Cooking */
	private void exitSequence_Microwave_Cooking() {
		exitSequence_Microwave_Cooking_r1();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_Microwave_Cooking_r1_Idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitingToStart */
	private void exitSequence_Microwave_Cooking_r1_WaitingToStart() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Cooking_r1_WaitingToStart();
	}
	
	/* Default exit sequence for state StartCooking */
	private void exitSequence_Microwave_Cooking_r1_StartCooking() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Countdown */
	private void exitSequence_Microwave_Cooking_r1_Countdown() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Cooking_r1_Countdown();
	}
	
	/* Default exit sequence for state WaitingToResume */
	private void exitSequence_Microwave_Cooking_r1_WaitingToResume() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ReadyToResume */
	private void exitSequence_Microwave_Cooking_r1_ReadyToResume() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Cooking_r1_ReadyToResume();
	}
	
	/* Default exit sequence for state CookingFinished */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished() {
		exitSequence_Microwave_Cooking_r1_CookingFinished_r1();
		exitAction_Microwave_Cooking_r1_CookingFinished();
	}
	
	/* Default exit sequence for state BeepOn */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
	}
	
	/* Default exit sequence for state BeepOff */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
	}
	
	/* Default exit sequence for state CookingFinished */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Door */
	private void exitSequence_Microwave_Door() {
		exitSequence_Microwave_Door_r1();
	}
	
	/* Default exit sequence for state CloseDoor */
	private void exitSequence_Microwave_Door_r1_CloseDoor() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state OpenDoor */
	private void exitSequence_Microwave_Door_r1_OpenDoor() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_Microwave_Timer() {
		exitSequence_Microwave_Timer_r1();
	}
	
	/* Default exit sequence for state ReadDigits */
	private void exitSequence_Microwave_Timer_r1_ReadDigits() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Timer_r1_ReadDigits();
	}
	
	/* Default exit sequence for state FirstDigit */
	private void exitSequence_Microwave_Timer_r1_FirstDigit() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SecondDigit */
	private void exitSequence_Microwave_Timer_r1_SecondDigit() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitingMoreDigits */
	private void exitSequence_Microwave_Timer_r1_WaitingMoreDigits() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Timer_r1_WaitingMoreDigits();
	}
	
	/* Default exit sequence for state ThirdDigit */
	private void exitSequence_Microwave_Timer_r1_ThirdDigit() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state FourthDigit */
	private void exitSequence_Microwave_Timer_r1_FourthDigit() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_Init:
			exitSequence_Microwave_Init();
			break;
		case microwave_Power_r1_HighPower:
			exitSequence_Microwave_Power_r1_HighPower();
			break;
		case microwave_Power_r1_LowPower:
			exitSequence_Microwave_Power_r1_LowPower();
			break;
		case microwave_Cooking_r1_Idle:
			exitSequence_Microwave_Cooking_r1_Idle();
			break;
		case microwave_Cooking_r1_WaitingToStart:
			exitSequence_Microwave_Cooking_r1_WaitingToStart();
			break;
		case microwave_Cooking_r1_StartCooking:
			exitSequence_Microwave_Cooking_r1_StartCooking();
			break;
		case microwave_Cooking_r1_Countdown:
			exitSequence_Microwave_Cooking_r1_Countdown();
			break;
		case microwave_Cooking_r1_WaitingToResume:
			exitSequence_Microwave_Cooking_r1_WaitingToResume();
			break;
		case microwave_Cooking_r1_ReadyToResume:
			exitSequence_Microwave_Cooking_r1_ReadyToResume();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case microwave_Door_r1_CloseDoor:
			exitSequence_Microwave_Door_r1_CloseDoor();
			break;
		case microwave_Door_r1_OpenDoor:
			exitSequence_Microwave_Door_r1_OpenDoor();
			break;
		case microwave_Timer_r1_ReadDigits:
			exitSequence_Microwave_Timer_r1_ReadDigits();
			break;
		case microwave_Timer_r1_FirstDigit:
			exitSequence_Microwave_Timer_r1_FirstDigit();
			break;
		case microwave_Timer_r1_SecondDigit:
			exitSequence_Microwave_Timer_r1_SecondDigit();
			break;
		case microwave_Timer_r1_WaitingMoreDigits:
			exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
			break;
		case microwave_Timer_r1_ThirdDigit:
			exitSequence_Microwave_Timer_r1_ThirdDigit();
			break;
		case microwave_Timer_r1_FourthDigit:
			exitSequence_Microwave_Timer_r1_FourthDigit();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Power_r1() {
		switch (stateVector[0]) {
		case microwave_Power_r1_HighPower:
			exitSequence_Microwave_Power_r1_HighPower();
			break;
		case microwave_Power_r1_LowPower:
			exitSequence_Microwave_Power_r1_LowPower();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Cooking_r1() {
		switch (stateVector[0]) {
		case microwave_Cooking_r1_Idle:
			exitSequence_Microwave_Cooking_r1_Idle();
			break;
		case microwave_Cooking_r1_WaitingToStart:
			exitSequence_Microwave_Cooking_r1_WaitingToStart();
			break;
		case microwave_Cooking_r1_StartCooking:
			exitSequence_Microwave_Cooking_r1_StartCooking();
			break;
		case microwave_Cooking_r1_Countdown:
			exitSequence_Microwave_Cooking_r1_Countdown();
			break;
		case microwave_Cooking_r1_WaitingToResume:
			exitSequence_Microwave_Cooking_r1_WaitingToResume();
			break;
		case microwave_Cooking_r1_ReadyToResume:
			exitSequence_Microwave_Cooking_r1_ReadyToResume();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			exitAction_Microwave_Cooking_r1_CookingFinished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Cooking_r1_CookingFinished_r1() {
		switch (stateVector[0]) {
		case microwave_Cooking_r1_CookingFinished_r1_BeepOn:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_BeepOff:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
			break;
		case microwave_Cooking_r1_CookingFinished_r1_CookingFinished:
			exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Door_r1() {
		switch (stateVector[0]) {
		case microwave_Door_r1_CloseDoor:
			exitSequence_Microwave_Door_r1_CloseDoor();
			break;
		case microwave_Door_r1_OpenDoor:
			exitSequence_Microwave_Door_r1_OpenDoor();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Timer_r1() {
		switch (stateVector[0]) {
		case microwave_Timer_r1_ReadDigits:
			exitSequence_Microwave_Timer_r1_ReadDigits();
			break;
		case microwave_Timer_r1_FirstDigit:
			exitSequence_Microwave_Timer_r1_FirstDigit();
			break;
		case microwave_Timer_r1_SecondDigit:
			exitSequence_Microwave_Timer_r1_SecondDigit();
			break;
		case microwave_Timer_r1_WaitingMoreDigits:
			exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
			break;
		case microwave_Timer_r1_ThirdDigit:
			exitSequence_Microwave_Timer_r1_ThirdDigit();
			break;
		case microwave_Timer_r1_FourthDigit:
			exitSequence_Microwave_Timer_r1_FourthDigit();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Cooking_r1__choice_0() {
		if (check_Microwave_Cooking_r1__choice_0_tr0_tr0()) {
			effect_Microwave_Cooking_r1__choice_0_tr0();
		} else {
			if (check_Microwave_Cooking_r1__choice_0_tr1_tr1()) {
				effect_Microwave_Cooking_r1__choice_0_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Timer_r1__choice_0() {
		if (check_Microwave_Timer_r1__choice_0_tr0_tr0()) {
			effect_Microwave_Timer_r1__choice_0_tr0();
		} else {
			if (check_Microwave_Timer_r1__choice_0_tr1_tr1()) {
				effect_Microwave_Timer_r1__choice_0_tr1();
			} else {
				if (check_Microwave_Timer_r1__choice_0_tr2_tr2()) {
					effect_Microwave_Timer_r1__choice_0_tr2();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cooking_r1__entry_Default() {
		enterSequence_Microwave_Cooking_r1_Idle_default();
	}
	
	/* Default react sequence for shallow history entry history */
	private void react_Microwave_Cooking_r1_history() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NullState$) {
			shallowEnterSequence_Microwave_Cooking_r1();
		} else {
			enterSequence_Microwave_Cooking_r1_Idle_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cooking_r1_CookingFinished_r1__entry_Default() {
		enterSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Door_r1__entry_Default() {
		enterSequence_Microwave_Door_r1_CloseDoor_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Timer_r1__entry_Default() {
		enterSequence_Microwave_Timer_r1_ReadDigits_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				exitSequence_Microwave_Init();
				enterSequence_Microwave_Cooking_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Power_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_Power();
					enterSequence_Microwave_Door_r1_OpenDoor_default();
				} else {
					if (sCInterface.close) {
						exitSequence_Microwave_Power();
						enterSequence_Microwave_Door_r1_CloseDoor_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Power_r1_HighPower_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Power_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_Power_r1_HighPower();
					enterSequence_Microwave_Power_r1_LowPower_default();
				} else {
					if (timeEvents[0]) {
						exitSequence_Microwave_Power();
						enterSequence_Microwave_Cooking_r1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Power_r1_LowPower_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Power_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Power_r1_LowPower();
					enterSequence_Microwave_Power_r1_HighPower_default();
				} else {
					if (timeEvents[1]) {
						exitSequence_Microwave_Power();
						enterSequence_Microwave_Cooking_r1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_Cooking();
					enterSequence_Microwave_Door_r1_CloseDoor_default();
				} else {
					if (sCInterface.open) {
						exitSequence_Microwave_Cooking();
						enterSequence_Microwave_Door_r1_OpenDoor_default();
					} else {
						if (sCInterface.stop) {
							exitSequence_Microwave_Cooking();
							enterSequence_Microwave_Cooking_r1_Idle_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_Idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Cooking();
					enterSequence_Microwave_Power_r1_HighPower_default();
				} else {
					if (sCInterface.low) {
						exitSequence_Microwave_Cooking();
						enterSequence_Microwave_Power_r1_LowPower_default();
					} else {
						if (sCInterface.timer) {
							exitSequence_Microwave_Cooking();
							enterSequence_Microwave_Timer_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_WaitingToStart_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (timeEvents[2]) {
					exitSequence_Microwave_Cooking_r1_WaitingToStart();
					enterSequence_Microwave_Cooking_r1_Idle_default();
				} else {
					if (sCInterface.start) {
						exitSequence_Microwave_Cooking_r1_WaitingToStart();
						react_Microwave_Cooking_r1__choice_0();
					} else {
						if (sCInterface.timer) {
							exitSequence_Microwave_Cooking();
							enterSequence_Microwave_Timer_default();
						} else {
							if (getTotalTime()==0) {
								exitSequence_Microwave_Cooking_r1_WaitingToStart();
								enterSequence_Microwave_Cooking_r1_Idle_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_StartCooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				exitSequence_Microwave_Cooking_r1_StartCooking();
				enterSequence_Microwave_Cooking_r1_Countdown_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_Countdown_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (getDoorClosed()==false) {
					exitSequence_Microwave_Cooking_r1_Countdown();
					enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
				} else {
					if (getTotalTime()==0) {
						exitSequence_Microwave_Cooking_r1_Countdown();
						enterSequence_Microwave_Cooking_r1_CookingFinished_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (((timeEvents[3]) && (getTotalTime()>0))) {
				setTotalTime(getTotalTime() - 1);
				
				sCInterface.operationCallback.displayTime(getTotalTime());
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_WaitingToResume_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (getDoorClosed()==true) {
					exitSequence_Microwave_Cooking_r1_WaitingToResume();
					enterSequence_Microwave_Cooking_r1_ReadyToResume_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_ReadyToResume_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (sCInterface.start) {
					exitSequence_Microwave_Cooking_r1_ReadyToResume();
					enterSequence_Microwave_Cooking_r1_StartCooking_default();
				} else {
					if (getDoorClosed()==false) {
						exitSequence_Microwave_Cooking_r1_ReadyToResume();
						enterSequence_Microwave_Cooking_r1_WaitingToResume_default();
					} else {
						if (timeEvents[4]) {
							exitSequence_Microwave_Cooking_r1_ReadyToResume();
							enterSequence_Microwave_Cooking_r1_Idle_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_CookingFinished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_react(try_transition)==false) {
				if (timeEvents[5]) {
					exitSequence_Microwave_Cooking_r1_CookingFinished();
					enterSequence_Microwave_Cooking_r1_Idle_default();
				} else {
					if (getDoorClosed()==false) {
						exitSequence_Microwave_Cooking_r1_CookingFinished();
						enterSequence_Microwave_Cooking_r1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_CookingFinished_r1_BeepOn_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_r1_CookingFinished_react(try_transition)==false) {
				if (timeEvents[6]) {
					exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn();
					enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_CookingFinished_r1_BeepOff_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_r1_CookingFinished_react(try_transition)==false) {
				if (timeEvents[7]) {
					exitSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOff();
					enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Cooking_r1_CookingFinished_r1_CookingFinished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Cooking_r1_CookingFinished_react(try_transition)==false) {
				exitSequence_Microwave_Cooking_r1_CookingFinished_r1_CookingFinished();
				enterSequence_Microwave_Cooking_r1_CookingFinished_r1_BeepOn_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Door_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Door_r1_CloseDoor_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Door_react(try_transition)==false) {
				exitSequence_Microwave_Door();
				react_Microwave_Cooking_r1_history();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Door_r1_OpenDoor_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Door_react(try_transition)==false) {
				exitSequence_Microwave_Door();
				react_Microwave_Cooking_r1_history();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_Timer();
					enterSequence_Microwave_Door_r1_OpenDoor_default();
				} else {
					if (sCInterface.close) {
						exitSequence_Microwave_Timer();
						enterSequence_Microwave_Door_r1_CloseDoor_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_ReadDigits_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Timer_r1_ReadDigits();
					enterSequence_Microwave_Timer_r1_FirstDigit_default();
				} else {
					if (timeEvents[8]) {
						exitSequence_Microwave_Timer();
						enterSequence_Microwave_Cooking_r1_Idle_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_FirstDigit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				exitSequence_Microwave_Timer_r1_FirstDigit();
				enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_SecondDigit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				exitSequence_Microwave_Timer_r1_SecondDigit();
				enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_WaitingMoreDigits_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Timer_r1_WaitingMoreDigits();
					react_Microwave_Timer_r1__choice_0();
				} else {
					if (timeEvents[9]) {
						exitSequence_Microwave_Timer();
						enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
					} else {
						if (sCInterface.start) {
							exitSequence_Microwave_Timer();
							react_Microwave_Cooking_r1__choice_0();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_ThirdDigit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				exitSequence_Microwave_Timer_r1_ThirdDigit();
				enterSequence_Microwave_Timer_r1_WaitingMoreDigits_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Timer_r1_FourthDigit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Timer_react(try_transition)==false) {
				exitSequence_Microwave_Timer();
				enterSequence_Microwave_Cooking_r1_WaitingToStart_default();
			}
		}
		return did_transition;
	}
	
}
